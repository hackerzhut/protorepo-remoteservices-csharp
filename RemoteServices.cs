// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: remote_services.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Remoteservices {

  /// <summary>Holder for reflection information generated from remote_services.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class RemoteServicesReflection {

    #region Descriptor
    /// <summary>File descriptor for remote_services.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RemoteServicesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVyZW1vdGVfc2VydmljZXMucHJvdG8SDnJlbW90ZXNlcnZpY2VzIlwKB1Jl",
            "cXVlc3QSDQoFYnJhbmQYASABKAkSDwoHY2hhbm5lbBgCIAEoCRIVCg1hdXRo",
            "b3JpemF0aW9uGAMgASgJEgsKA3ZpbhgEIAEoCRINCgVkdW1teRgFIAEoCSJc",
            "CghSZXNwb25zZRImCgZyZXN1bHQYASABKAsyFi5yZW1vdGVzZXJ2aWNlcy5S",
            "ZXN1bHQSKAoHY29tbWFuZBgCIAEoCzIXLnJlbW90ZXNlcnZpY2VzLkNvbW1h",
            "bmQiKwoGUmVzdWx0EgwKBGNvZGUYASABKAMSEwoLZGVzY3JpcHRpb24YAiAB",
            "KAkiYgoHQ29tbWFuZBISCgppc3N1ZWRUaW1lGAEgASgDEhEKCXN0YXJ0VGlt",
            "ZRgCIAEoAxIOCgZzdGF0dXMYAyABKAkSDgoGYWN0aW9uGAQgASgJEhAKCHBy",
            "b2dyZXNzGAUgASgJIiYKBUVycm9yEgwKBGNvZGUYASABKAkSDwoHbWVzc2Fn",
            "ZRgCIAEoCTKcAQoOUmVtb3RlU2VydmljZXMSQAoJR2V0U3RhdHVzEhcucmVt",
            "b3Rlc2VydmljZXMuUmVxdWVzdBoYLnJlbW90ZXNlcnZpY2VzLlJlc3BvbnNl",
            "IgASSAoPR2V0U3RhdHVzU3RyZWFtEhcucmVtb3Rlc2VydmljZXMuUmVxdWVz",
            "dBoYLnJlbW90ZXNlcnZpY2VzLlJlc3BvbnNlIgAwAUIiCh5jb20udG95b3Rh",
            "LnJlbW90ZXNlcnZpY2VzLmdycGNQAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Remoteservices.Request), global::Remoteservices.Request.Parser, new[]{ "Brand", "Channel", "Authorization", "Vin", "Dummy" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Remoteservices.Response), global::Remoteservices.Response.Parser, new[]{ "Result", "Command" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Remoteservices.Result), global::Remoteservices.Result.Parser, new[]{ "Code", "Description" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Remoteservices.Command), global::Remoteservices.Command.Parser, new[]{ "IssuedTime", "StartTime", "Status", "Action", "Progress" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Remoteservices.Error), global::Remoteservices.Error.Parser, new[]{ "Code", "Message" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///  Common Request for all remote services
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Request : pb::IMessage<Request> {
    private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
    public static pb::MessageParser<Request> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Remoteservices.RemoteServicesReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Request() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Request(Request other) : this() {
      brand_ = other.brand_;
      channel_ = other.channel_;
      authorization_ = other.authorization_;
      vin_ = other.vin_;
      dummy_ = other.dummy_;
    }

    public Request Clone() {
      return new Request(this);
    }

    /// <summary>Field number for the "brand" field.</summary>
    public const int BrandFieldNumber = 1;
    private string brand_ = "";
    public string Brand {
      get { return brand_; }
      set {
        brand_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 2;
    private string channel_ = "";
    public string Channel {
      get { return channel_; }
      set {
        channel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "authorization" field.</summary>
    public const int AuthorizationFieldNumber = 3;
    private string authorization_ = "";
    public string Authorization {
      get { return authorization_; }
      set {
        authorization_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "vin" field.</summary>
    public const int VinFieldNumber = 4;
    private string vin_ = "";
    public string Vin {
      get { return vin_; }
      set {
        vin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dummy" field.</summary>
    public const int DummyFieldNumber = 5;
    private string dummy_ = "";
    public string Dummy {
      get { return dummy_; }
      set {
        dummy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Request);
    }

    public bool Equals(Request other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Brand != other.Brand) return false;
      if (Channel != other.Channel) return false;
      if (Authorization != other.Authorization) return false;
      if (Vin != other.Vin) return false;
      if (Dummy != other.Dummy) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Brand.Length != 0) hash ^= Brand.GetHashCode();
      if (Channel.Length != 0) hash ^= Channel.GetHashCode();
      if (Authorization.Length != 0) hash ^= Authorization.GetHashCode();
      if (Vin.Length != 0) hash ^= Vin.GetHashCode();
      if (Dummy.Length != 0) hash ^= Dummy.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Brand.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Brand);
      }
      if (Channel.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Channel);
      }
      if (Authorization.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Authorization);
      }
      if (Vin.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Vin);
      }
      if (Dummy.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Dummy);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Brand.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Brand);
      }
      if (Channel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Channel);
      }
      if (Authorization.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Authorization);
      }
      if (Vin.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Vin);
      }
      if (Dummy.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Dummy);
      }
      return size;
    }

    public void MergeFrom(Request other) {
      if (other == null) {
        return;
      }
      if (other.Brand.Length != 0) {
        Brand = other.Brand;
      }
      if (other.Channel.Length != 0) {
        Channel = other.Channel;
      }
      if (other.Authorization.Length != 0) {
        Authorization = other.Authorization;
      }
      if (other.Vin.Length != 0) {
        Vin = other.Vin;
      }
      if (other.Dummy.Length != 0) {
        Dummy = other.Dummy;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Brand = input.ReadString();
            break;
          }
          case 18: {
            Channel = input.ReadString();
            break;
          }
          case 26: {
            Authorization = input.ReadString();
            break;
          }
          case 34: {
            Vin = input.ReadString();
            break;
          }
          case 42: {
            Dummy = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Response : pb::IMessage<Response> {
    private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
    public static pb::MessageParser<Response> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Remoteservices.RemoteServicesReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Response() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Response(Response other) : this() {
      Result = other.result_ != null ? other.Result.Clone() : null;
      Command = other.command_ != null ? other.Command.Clone() : null;
    }

    public Response Clone() {
      return new Response(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::Remoteservices.Result result_;
    public global::Remoteservices.Result Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "command" field.</summary>
    public const int CommandFieldNumber = 2;
    private global::Remoteservices.Command command_;
    public global::Remoteservices.Command Command {
      get { return command_; }
      set {
        command_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Response);
    }

    public bool Equals(Response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Result, other.Result)) return false;
      if (!object.Equals(Command, other.Command)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (result_ != null) hash ^= Result.GetHashCode();
      if (command_ != null) hash ^= Command.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (result_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Result);
      }
      if (command_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Command);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (result_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
      }
      if (command_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Command);
      }
      return size;
    }

    public void MergeFrom(Response other) {
      if (other == null) {
        return;
      }
      if (other.result_ != null) {
        if (result_ == null) {
          result_ = new global::Remoteservices.Result();
        }
        Result.MergeFrom(other.Result);
      }
      if (other.command_ != null) {
        if (command_ == null) {
          command_ = new global::Remoteservices.Command();
        }
        Command.MergeFrom(other.Command);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (result_ == null) {
              result_ = new global::Remoteservices.Result();
            }
            input.ReadMessage(result_);
            break;
          }
          case 18: {
            if (command_ == null) {
              command_ = new global::Remoteservices.Command();
            }
            input.ReadMessage(command_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Result : pb::IMessage<Result> {
    private static readonly pb::MessageParser<Result> _parser = new pb::MessageParser<Result>(() => new Result());
    public static pb::MessageParser<Result> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Remoteservices.RemoteServicesReflection.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Result() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Result(Result other) : this() {
      code_ = other.code_;
      description_ = other.description_;
    }

    public Result Clone() {
      return new Result(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private long code_;
    public long Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private string description_ = "";
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Result);
    }

    public bool Equals(Result other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Description != other.Description) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0L) hash ^= Code.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Code);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Code != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Code);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      return size;
    }

    public void MergeFrom(Result other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0L) {
        Code = other.Code;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt64();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Command : pb::IMessage<Command> {
    private static readonly pb::MessageParser<Command> _parser = new pb::MessageParser<Command>(() => new Command());
    public static pb::MessageParser<Command> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Remoteservices.RemoteServicesReflection.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Command() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Command(Command other) : this() {
      issuedTime_ = other.issuedTime_;
      startTime_ = other.startTime_;
      status_ = other.status_;
      action_ = other.action_;
      progress_ = other.progress_;
    }

    public Command Clone() {
      return new Command(this);
    }

    /// <summary>Field number for the "issuedTime" field.</summary>
    public const int IssuedTimeFieldNumber = 1;
    private long issuedTime_;
    public long IssuedTime {
      get { return issuedTime_; }
      set {
        issuedTime_ = value;
      }
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 2;
    private long startTime_;
    public long StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private string status_ = "";
    public string Status {
      get { return status_; }
      set {
        status_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 4;
    private string action_ = "";
    public string Action {
      get { return action_; }
      set {
        action_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "progress" field.</summary>
    public const int ProgressFieldNumber = 5;
    private string progress_ = "";
    public string Progress {
      get { return progress_; }
      set {
        progress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Command);
    }

    public bool Equals(Command other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IssuedTime != other.IssuedTime) return false;
      if (StartTime != other.StartTime) return false;
      if (Status != other.Status) return false;
      if (Action != other.Action) return false;
      if (Progress != other.Progress) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (IssuedTime != 0L) hash ^= IssuedTime.GetHashCode();
      if (StartTime != 0L) hash ^= StartTime.GetHashCode();
      if (Status.Length != 0) hash ^= Status.GetHashCode();
      if (Action.Length != 0) hash ^= Action.GetHashCode();
      if (Progress.Length != 0) hash ^= Progress.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (IssuedTime != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(IssuedTime);
      }
      if (StartTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(StartTime);
      }
      if (Status.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Status);
      }
      if (Action.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Action);
      }
      if (Progress.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Progress);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (IssuedTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(IssuedTime);
      }
      if (StartTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
      }
      if (Status.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Status);
      }
      if (Action.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Action);
      }
      if (Progress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Progress);
      }
      return size;
    }

    public void MergeFrom(Command other) {
      if (other == null) {
        return;
      }
      if (other.IssuedTime != 0L) {
        IssuedTime = other.IssuedTime;
      }
      if (other.StartTime != 0L) {
        StartTime = other.StartTime;
      }
      if (other.Status.Length != 0) {
        Status = other.Status;
      }
      if (other.Action.Length != 0) {
        Action = other.Action;
      }
      if (other.Progress.Length != 0) {
        Progress = other.Progress;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IssuedTime = input.ReadInt64();
            break;
          }
          case 16: {
            StartTime = input.ReadInt64();
            break;
          }
          case 26: {
            Status = input.ReadString();
            break;
          }
          case 34: {
            Action = input.ReadString();
            break;
          }
          case 42: {
            Progress = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Error : pb::IMessage<Error> {
    private static readonly pb::MessageParser<Error> _parser = new pb::MessageParser<Error>(() => new Error());
    public static pb::MessageParser<Error> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Remoteservices.RemoteServicesReflection.Descriptor.MessageTypes[4]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Error() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Error(Error other) : this() {
      code_ = other.code_;
      message_ = other.message_;
    }

    public Error Clone() {
      return new Error(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private string code_ = "";
    public string Code {
      get { return code_; }
      set {
        code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Error);
    }

    public bool Equals(Error other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Message != other.Message) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Code.Length != 0) hash ^= Code.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Code.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Code);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Code.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(Error other) {
      if (other == null) {
        return;
      }
      if (other.Code.Length != 0) {
        Code = other.Code;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Code = input.ReadString();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
